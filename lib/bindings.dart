// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to the ouisync library
class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void directory_create(
    int repo,
    ffi.Pointer<ffi.Int8> path,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _directory_create(
      repo,
      path,
      port,
      error,
    );
  }

  late final _directory_create_ptr =
      _lookup<ffi.NativeFunction<_c_directory_create>>('directory_create');
  late final _dart_directory_create _directory_create =
      _directory_create_ptr.asFunction<_dart_directory_create>();

  void directory_open(
    int repo,
    ffi.Pointer<ffi.Int8> path,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _directory_open(
      repo,
      path,
      port,
      error,
    );
  }

  late final _directory_open_ptr =
      _lookup<ffi.NativeFunction<_c_directory_open>>('directory_open');
  late final _dart_directory_open _directory_open =
      _directory_open_ptr.asFunction<_dart_directory_open>();

  /// Removes the directory at the given path from the repository. The directory must be empty.
  void directory_remove(
    int repo,
    ffi.Pointer<ffi.Int8> path,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _directory_remove(
      repo,
      path,
      port,
      error,
    );
  }

  late final _directory_remove_ptr =
      _lookup<ffi.NativeFunction<_c_directory_remove>>('directory_remove');
  late final _dart_directory_remove _directory_remove =
      _directory_remove_ptr.asFunction<_dart_directory_remove>();

  /// Removes the directory at the given path including its content from the repository.
  void directory_remove_recursively(
    int repo,
    ffi.Pointer<ffi.Int8> path,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _directory_remove_recursively(
      repo,
      path,
      port,
      error,
    );
  }

  late final _directory_remove_recursively_ptr =
      _lookup<ffi.NativeFunction<_c_directory_remove_recursively>>(
          'directory_remove_recursively');
  late final _dart_directory_remove_recursively _directory_remove_recursively =
      _directory_remove_recursively_ptr
          .asFunction<_dart_directory_remove_recursively>();

  void directory_close(
    int handle,
  ) {
    return _directory_close(
      handle,
    );
  }

  late final _directory_close_ptr =
      _lookup<ffi.NativeFunction<_c_directory_close>>('directory_close');
  late final _dart_directory_close _directory_close =
      _directory_close_ptr.asFunction<_dart_directory_close>();

  int directory_num_entries(
    int handle,
  ) {
    return _directory_num_entries(
      handle,
    );
  }

  late final _directory_num_entries_ptr =
      _lookup<ffi.NativeFunction<_c_directory_num_entries>>(
          'directory_num_entries');
  late final _dart_directory_num_entries _directory_num_entries =
      _directory_num_entries_ptr.asFunction<_dart_directory_num_entries>();

  int directory_get_entry(
    int handle,
    int index,
  ) {
    return _directory_get_entry(
      handle,
      index,
    );
  }

  late final _directory_get_entry_ptr =
      _lookup<ffi.NativeFunction<_c_directory_get_entry>>(
          'directory_get_entry');
  late final _dart_directory_get_entry _directory_get_entry =
      _directory_get_entry_ptr.asFunction<_dart_directory_get_entry>();

  ffi.Pointer<ffi.Int8> dir_entry_name(
    int handle,
  ) {
    return _dir_entry_name(
      handle,
    );
  }

  late final _dir_entry_name_ptr =
      _lookup<ffi.NativeFunction<_c_dir_entry_name>>('dir_entry_name');
  late final _dart_dir_entry_name _dir_entry_name =
      _dir_entry_name_ptr.asFunction<_dart_dir_entry_name>();

  int dir_entry_type(
    int handle,
  ) {
    return _dir_entry_type(
      handle,
    );
  }

  late final _dir_entry_type_ptr =
      _lookup<ffi.NativeFunction<_c_dir_entry_type>>('dir_entry_type');
  late final _dart_dir_entry_type _dir_entry_type =
      _dir_entry_type_ptr.asFunction<_dart_dir_entry_type>();

  void file_open(
    int repo,
    ffi.Pointer<ffi.Int8> path,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_open(
      repo,
      path,
      port,
      error,
    );
  }

  late final _file_open_ptr =
      _lookup<ffi.NativeFunction<_c_file_open>>('file_open');
  late final _dart_file_open _file_open =
      _file_open_ptr.asFunction<_dart_file_open>();

  void file_create(
    int repo,
    ffi.Pointer<ffi.Int8> path,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_create(
      repo,
      path,
      port,
      error,
    );
  }

  late final _file_create_ptr =
      _lookup<ffi.NativeFunction<_c_file_create>>('file_create');
  late final _dart_file_create _file_create =
      _file_create_ptr.asFunction<_dart_file_create>();

  /// Remove (delete) the file at the given path from the repository.
  void file_remove(
    int repo,
    ffi.Pointer<ffi.Int8> path,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_remove(
      repo,
      path,
      port,
      error,
    );
  }

  late final _file_remove_ptr =
      _lookup<ffi.NativeFunction<_c_file_remove>>('file_remove');
  late final _dart_file_remove _file_remove =
      _file_remove_ptr.asFunction<_dart_file_remove>();

  void file_close(
    int handle,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_close(
      handle,
      port,
      error,
    );
  }

  late final _file_close_ptr =
      _lookup<ffi.NativeFunction<_c_file_close>>('file_close');
  late final _dart_file_close _file_close =
      _file_close_ptr.asFunction<_dart_file_close>();

  void file_flush(
    int handle,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_flush(
      handle,
      port,
      error,
    );
  }

  late final _file_flush_ptr =
      _lookup<ffi.NativeFunction<_c_file_flush>>('file_flush');
  late final _dart_file_flush _file_flush =
      _file_flush_ptr.asFunction<_dart_file_flush>();

  /// Read at most `len` bytes from the file into `buffer`. Yields the number of bytes actually read
  /// (zero on EOF).
  void file_read(
    int handle,
    int offset,
    ffi.Pointer<ffi.Uint8> buffer,
    int len,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_read(
      handle,
      offset,
      buffer,
      len,
      port,
      error,
    );
  }

  late final _file_read_ptr =
      _lookup<ffi.NativeFunction<_c_file_read>>('file_read');
  late final _dart_file_read _file_read =
      _file_read_ptr.asFunction<_dart_file_read>();

  /// Write `len` bytes from `buffer` into the file.
  void file_write(
    int handle,
    int offset,
    ffi.Pointer<ffi.Uint8> buffer,
    int len,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_write(
      handle,
      offset,
      buffer,
      len,
      port,
      error,
    );
  }

  late final _file_write_ptr =
      _lookup<ffi.NativeFunction<_c_file_write>>('file_write');
  late final _dart_file_write _file_write =
      _file_write_ptr.asFunction<_dart_file_write>();

  /// Truncate the file to `len` bytes.
  void file_truncate(
    int handle,
    int len,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_truncate(
      handle,
      len,
      port,
      error,
    );
  }

  late final _file_truncate_ptr =
      _lookup<ffi.NativeFunction<_c_file_truncate>>('file_truncate');
  late final _dart_file_truncate _file_truncate =
      _file_truncate_ptr.asFunction<_dart_file_truncate>();

  /// Retrieve the size of the file in bytes.
  void file_len(
    int handle,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _file_len(
      handle,
      port,
      error,
    );
  }

  late final _file_len_ptr =
      _lookup<ffi.NativeFunction<_c_file_len>>('file_len');
  late final _dart_file_len _file_len =
      _file_len_ptr.asFunction<_dart_file_len>();

  /// Opens a repository.
  void repository_open(
    ffi.Pointer<ffi.Int8> store,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _repository_open(
      store,
      port,
      error,
    );
  }

  late final _repository_open_ptr =
      _lookup<ffi.NativeFunction<_c_repository_open>>('repository_open');
  late final _dart_repository_open _repository_open =
      _repository_open_ptr.asFunction<_dart_repository_open>();

  /// Closes a repository.
  void repository_close(
    int handle,
  ) {
    return _repository_close(
      handle,
    );
  }

  late final _repository_close_ptr =
      _lookup<ffi.NativeFunction<_c_repository_close>>('repository_close');
  late final _dart_repository_close _repository_close =
      _repository_close_ptr.asFunction<_dart_repository_close>();

  /// Returns the type of repository entry (file, directory, ...).
  /// If the entry doesn't exists, returns `ENTRY_TYPE_INVALID`, not an error.
  void repository_entry_type(
    int handle,
    ffi.Pointer<ffi.Int8> path,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _repository_entry_type(
      handle,
      path,
      port,
      error,
    );
  }

  late final _repository_entry_type_ptr =
      _lookup<ffi.NativeFunction<_c_repository_entry_type>>(
          'repository_entry_type');
  late final _dart_repository_entry_type _repository_entry_type =
      _repository_entry_type_ptr.asFunction<_dart_repository_entry_type>();

  /// Move/rename entry from src to dst.
  void repository_move_entry(
    int handle,
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Int8> dst,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
  ) {
    return _repository_move_entry(
      handle,
      src,
      dst,
      port,
      error,
    );
  }

  late final _repository_move_entry_ptr =
      _lookup<ffi.NativeFunction<_c_repository_move_entry>>(
          'repository_move_entry');
  late final _dart_repository_move_entry _repository_move_entry =
      _repository_move_entry_ptr.asFunction<_dart_repository_move_entry>();

  /// Subscribe to change notifications from the repository.
  int repository_subscribe(
    int handle,
    int port,
  ) {
    return _repository_subscribe(
      handle,
      port,
    );
  }

  late final _repository_subscribe_ptr =
      _lookup<ffi.NativeFunction<_c_repository_subscribe>>(
          'repository_subscribe');
  late final _dart_repository_subscribe _repository_subscribe =
      _repository_subscribe_ptr.asFunction<_dart_repository_subscribe>();

  /// Cancel the repository change notifications subscription.
  void subscription_cancel(
    int handle,
  ) {
    return _subscription_cancel(
      handle,
    );
  }

  late final _subscription_cancel_ptr =
      _lookup<ffi.NativeFunction<_c_subscription_cancel>>(
          'subscription_cancel');
  late final _dart_subscription_cancel _subscription_cancel =
      _subscription_cancel_ptr.asFunction<_dart_subscription_cancel>();

  void repository_is_dht_enabled(
    int handle,
    int port,
  ) {
    return _repository_is_dht_enabled(
      handle,
      port,
    );
  }

  late final _repository_is_dht_enabled_ptr =
      _lookup<ffi.NativeFunction<_c_repository_is_dht_enabled>>(
          'repository_is_dht_enabled');
  late final _dart_repository_is_dht_enabled _repository_is_dht_enabled =
      _repository_is_dht_enabled_ptr
          .asFunction<_dart_repository_is_dht_enabled>();

  void repository_enable_dht(
    int handle,
    int port,
  ) {
    return _repository_enable_dht(
      handle,
      port,
    );
  }

  late final _repository_enable_dht_ptr =
      _lookup<ffi.NativeFunction<_c_repository_enable_dht>>(
          'repository_enable_dht');
  late final _dart_repository_enable_dht _repository_enable_dht =
      _repository_enable_dht_ptr.asFunction<_dart_repository_enable_dht>();

  void repository_disable_dht(
    int handle,
    int port,
  ) {
    return _repository_disable_dht(
      handle,
      port,
    );
  }

  late final _repository_disable_dht_ptr =
      _lookup<ffi.NativeFunction<_c_repository_disable_dht>>(
          'repository_disable_dht');
  late final _dart_repository_disable_dht _repository_disable_dht =
      _repository_disable_dht_ptr.asFunction<_dart_repository_disable_dht>();

  /// Opens the ouisync session. `post_c_object_fn` should be a pointer to the dart's
  /// `NativeApi.postCObject` function cast to `Pointer<Void>` (the casting is necessary to work
  /// around limitations of the binding generators).
  void session_open(
    ffi.Pointer<ffi.Void> post_c_object_fn,
    ffi.Pointer<ffi.Int8> store,
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_ptr,
  ) {
    return _session_open(
      post_c_object_fn,
      store,
      port,
      error_ptr,
    );
  }

  late final _session_open_ptr =
      _lookup<ffi.NativeFunction<_c_session_open>>('session_open');
  late final _dart_session_open _session_open =
      _session_open_ptr.asFunction<_dart_session_open>();

  /// Closes the ouisync session.
  void session_close() {
    return _session_close();
  }

  late final _session_close_ptr =
      _lookup<ffi.NativeFunction<_c_session_close>>('session_close');
  late final _dart_session_close _session_close =
      _session_close_ptr.asFunction<_dart_session_close>();

  void session_get_network(
    int port,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> error_ptr,
  ) {
    return _session_get_network(
      port,
      error_ptr,
    );
  }

  late final _session_get_network_ptr =
      _lookup<ffi.NativeFunction<_c_session_get_network>>(
          'session_get_network');
  late final _dart_session_get_network _session_get_network =
      _session_get_network_ptr.asFunction<_dart_session_get_network>();
}

const int ENTRY_TYPE_INVALID = 0;

const int ENTRY_TYPE_FILE = 1;

const int ENTRY_TYPE_DIRECTORY = 2;

typedef _c_directory_create = ffi.Void Function(
  ffi.Uint64 repo,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_directory_create = void Function(
  int repo,
  ffi.Pointer<ffi.Int8> path,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_directory_open = ffi.Void Function(
  ffi.Uint64 repo,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_directory_open = void Function(
  int repo,
  ffi.Pointer<ffi.Int8> path,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_directory_remove = ffi.Void Function(
  ffi.Uint64 repo,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_directory_remove = void Function(
  int repo,
  ffi.Pointer<ffi.Int8> path,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_directory_remove_recursively = ffi.Void Function(
  ffi.Uint64 repo,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_directory_remove_recursively = void Function(
  int repo,
  ffi.Pointer<ffi.Int8> path,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_directory_close = ffi.Void Function(
  ffi.Uint64 handle,
);

typedef _dart_directory_close = void Function(
  int handle,
);

typedef _c_directory_num_entries = ffi.Uint64 Function(
  ffi.Uint64 handle,
);

typedef _dart_directory_num_entries = int Function(
  int handle,
);

typedef _c_directory_get_entry = ffi.Uint64 Function(
  ffi.Uint64 handle,
  ffi.Uint64 index,
);

typedef _dart_directory_get_entry = int Function(
  int handle,
  int index,
);

typedef _c_dir_entry_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 handle,
);

typedef _dart_dir_entry_name = ffi.Pointer<ffi.Int8> Function(
  int handle,
);

typedef _c_dir_entry_type = ffi.Uint8 Function(
  ffi.Uint64 handle,
);

typedef _dart_dir_entry_type = int Function(
  int handle,
);

typedef _c_file_open = ffi.Void Function(
  ffi.Uint64 repo,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_open = void Function(
  int repo,
  ffi.Pointer<ffi.Int8> path,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_file_create = ffi.Void Function(
  ffi.Uint64 repo,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_create = void Function(
  int repo,
  ffi.Pointer<ffi.Int8> path,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_file_remove = ffi.Void Function(
  ffi.Uint64 repo,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_remove = void Function(
  int repo,
  ffi.Pointer<ffi.Int8> path,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_file_close = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_close = void Function(
  int handle,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_file_flush = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_flush = void Function(
  int handle,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_file_read = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Uint64 offset,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Uint64 len,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_read = void Function(
  int handle,
  int offset,
  ffi.Pointer<ffi.Uint8> buffer,
  int len,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_file_write = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Uint64 offset,
  ffi.Pointer<ffi.Uint8> buffer,
  ffi.Uint64 len,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_write = void Function(
  int handle,
  int offset,
  ffi.Pointer<ffi.Uint8> buffer,
  int len,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_file_truncate = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Uint64 len,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_truncate = void Function(
  int handle,
  int len,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_file_len = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_file_len = void Function(
  int handle,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_repository_open = ffi.Void Function(
  ffi.Pointer<ffi.Int8> store,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_repository_open = void Function(
  ffi.Pointer<ffi.Int8> store,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_repository_close = ffi.Void Function(
  ffi.Uint64 handle,
);

typedef _dart_repository_close = void Function(
  int handle,
);

typedef _c_repository_entry_type = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_repository_entry_type = void Function(
  int handle,
  ffi.Pointer<ffi.Int8> path,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_repository_move_entry = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int8> dst,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _dart_repository_move_entry = void Function(
  int handle,
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int8> dst,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error,
);

typedef _c_repository_subscribe = ffi.Uint64 Function(
  ffi.Uint64 handle,
  ffi.Int64 port,
);

typedef _dart_repository_subscribe = int Function(
  int handle,
  int port,
);

typedef _c_subscription_cancel = ffi.Void Function(
  ffi.Uint64 handle,
);

typedef _dart_subscription_cancel = void Function(
  int handle,
);

typedef _c_repository_is_dht_enabled = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Int64 port,
);

typedef _dart_repository_is_dht_enabled = void Function(
  int handle,
  int port,
);

typedef _c_repository_enable_dht = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Int64 port,
);

typedef _dart_repository_enable_dht = void Function(
  int handle,
  int port,
);

typedef _c_repository_disable_dht = ffi.Void Function(
  ffi.Uint64 handle,
  ffi.Int64 port,
);

typedef _dart_repository_disable_dht = void Function(
  int handle,
  int port,
);

typedef _c_session_open = ffi.Void Function(
  ffi.Pointer<ffi.Void> post_c_object_fn,
  ffi.Pointer<ffi.Int8> store,
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_ptr,
);

typedef _dart_session_open = void Function(
  ffi.Pointer<ffi.Void> post_c_object_fn,
  ffi.Pointer<ffi.Int8> store,
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_ptr,
);

typedef _c_session_close = ffi.Void Function();

typedef _dart_session_close = void Function();

typedef _c_session_get_network = ffi.Void Function(
  ffi.Int64 port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_ptr,
);

typedef _dart_session_get_network = void Function(
  int port,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> error_ptr,
);
